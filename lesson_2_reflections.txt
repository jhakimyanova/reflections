What happens when you initialize a repository? Why do you need to do it?

	It makes from ordinary directory a repository. The hidden folder .git is added to store bucnh of metadata to store the history of repository since it's created. I need to do it to track changes that happen to this repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	Staging area is bunch of files that will be included in next commit. It's intermediate area between working directory and the repository. From working directory it differs because files in working diretory can be untracked. From repository it differs because it doesn't contain history of this files.

How can you use the staging area to make sure you have one commit per logical change?

	I can add to staging area only that files that are part of one logical change. So git will commit not all changed files but only the files that I asked him to commit.	

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Situations when you want to keep main working version of your code intact and try experimental features. For example if then I'll find bug in main branch of my code(master) it will be easier for me to spread it to my experimental branches. Branches will also help me to checkout to different commits easier because they have clear human-readable names instead of long series of symbols that have id of each commit.

How do the diagrams help you visualize the branch structure?

	They show me what commits are reachable and what are not. I can see parent commit for each commit. They will also help me to merge in the future.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?	

	The result of merging two branches together is commit with message 'Merge coins branch'. After this commit the code will have changes of both branches. On the diagram we show it as a commit with 2 parents to show that this commit is the result of a merge.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?	

	Pros of automatic merging is obvious: it saves time and it makes impossible to do silly mistakes like typos while manual merging. Cons are that you can't manually control the process of merging. It meansa that you can get not what you have expected. For example if user1 adds the function and user2 adds the function that does the same but with the different name automerging will add both functions and the code will become redundant. The worst situation is that the code can become uncompilable after automatic merging.
